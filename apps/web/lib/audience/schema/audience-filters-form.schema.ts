import { z } from 'zod';

const numberRangeSchema = z
  .object({
    min: z.number(),
    max: z.number(),
  })
  .refine((data) => data.min <= data.max, {
    message: 'Minimum must be less than or equal to maximum',
  });

export type NumberRange = z.infer<typeof numberRangeSchema>;

export const audienceFiltersFormSchema = z.object({
  jobId: z.string(),
  segment: z.array(z.string()),
  dateRange: z.object({
    startDate: z.string().date(),
    endDate: z.string().date(),
  }),
  score: z.array(z.string()),
  filters: z.object({
    age: z.object({
      minAge: z.number(),
      maxAge: z.number(),
    }),
    city: z.array(z.string()),
    state: z.array(z.string()),
    zip: z.array(z.string()),
    gender: z.array(z.string()),
    profile: z.object({
      incomeRange: z.array(z.string()),
      homeowner: z.array(z.string()),
      married: z.array(z.string()),
      netWorth: z.array(z.string()),
      children: z.array(z.string()),
    }),
    businessProfile: z.object({
      jobTitle: z.array(z.string()),
      seniority: z.array(z.string()),
      department: z.array(z.string()),
      companyName: z.array(z.string()),
      companyDomain: z.array(z.string()),
      industry: z.array(z.string()),
      sic: z.array(z.string()),
      employeeCount: z.array(z.string()),
      companyRevenue: z.array(z.string()),
      companyNaics: z.array(z.string()),
    }),
    attributes: z.object({
      creditRating: z.array(z.string()),
      languageCode: z.array(z.string()),
      occupationGroup: z.array(z.string()),
      occupationType: z.array(z.string()),
      homeYearBuilt: numberRangeSchema,
      singleParent: z.array(z.string()),
      craCode: z.array(z.string()),
      dwellingType: z.array(z.string()),
      creditRangeNewCredit: z.array(z.string()),
      ethnicCode: z.array(z.string()),
      maritalStatus: z.array(z.string()),
      education: z.array(z.string()),
      creditCardUser: z.array(z.string()),
      investment: z.array(z.string()),
      smoker: z.array(z.string()),
      donateConservative: z.array(z.string()),
      donateLiberal: z.array(z.string()),
      donatePolitical: z.array(z.string()),
      donateVeterans: z.array(z.string()),
      homePurchasePrice: numberRangeSchema,
      homePurchaseYear: numberRangeSchema,
      homeHeat: z.array(z.string()),
      homeSwimmingPool: z.array(z.string()),
      airCon: z.array(z.string()),
      sewer: z.array(z.string()),
      water: z.array(z.string()),
      pets: z.array(z.string()),
      cats: z.array(z.string()),
      dogs: z.array(z.string()),
      mortgageLoanType: z.array(z.string()),
      mortgageRateType: z.array(z.string()),
      estimatedHomeValue: z.array(z.string()),
      mortgageAmount: numberRangeSchema,
      generationsInHouseHold: z.array(z.string()),
      salesTransactionType: z.array(z.string()),
    }),
    notNulls: z.array(z.string()),
    nullOnly: z.array(z.string()),
  }),
});

export type AudienceFiltersFormValues = z.infer<
  typeof audienceFiltersFormSchema
>;

export type AudienceFiltersFormValue = string[] | NumberRange;

export const audienceFiltersFormDefaultValues = {
  jobId: '',
  segment: [],
  dateRange: {
    startDate: '',
    endDate: '',
  },
  score: [],
  filters: {
    age: {
      minAge: 0,
      maxAge: 0,
    },
    city: [],
    state: [],
    zip: [],
    gender: [],
    profile: {
      incomeRange: [],
      homeowner: [],
      married: [],
      netWorth: [],
      children: [],
    },
    businessProfile: {
      jobTitle: [],
      seniority: [],
      department: [],
      companyName: [],
      companyDomain: [],
      industry: [],
      sic: [],
      employeeCount: [],
      companyRevenue: [],
      companyNaics: [],
    },
    attributes: {
      creditRating: [],
      languageCode: [],
      occupationGroup: [],
      occupationType: [],
      homeYearBuilt: {
        min: 0,
        max: 0,
      },
      singleParent: [],
      craCode: [],
      dwellingType: [],
      creditRangeNewCredit: [],
      ethnicCode: [],
      maritalStatus: [],
      education: [],
      creditCardUser: [],
      investment: [],
      smoker: [],
      donateConservative: [],
      donateLiberal: [],
      donatePolitical: [],
      donateVeterans: [],
      homePurchasePrice: {
        min: 0,
        max: 0,
      },
      homePurchaseYear: {
        min: 0,
        max: 0,
      },
      homeHeat: [],
      homeSwimmingPool: [],
      airCon: [],
      sewer: [],
      water: [],
      pets: [],
      cats: [],
      dogs: [],
      mortgageLoanType: [],
      mortgageRateType: [],
      estimatedHomeValue: [],
      mortgageAmount: {
        min: 0,
        max: 0,
      },
      generationsInHouseHold: [],
      salesTransactionType: [],
    },
    notNulls: [],
    nullOnly: [],
  },
} satisfies z.infer<typeof audienceFiltersFormSchema>;

export const audienceFiltersFormSchema2 = z.object({
  // dateRange: z.object({
  //   startDate: z.string(),
  //   endDate: z.string(),
  // }),

  filters: z.object({
    // age: z.object({
    //   minAge: z.number(),
    //   maxAge: z.number(),
    // }),
    // city: z.array(z.string()),
    // state: z.array(z.string()),
    // zip: z.array(z.string()),
    // gender: z.array(z.string()),
    profile: z.object({
      //incomeRange: z.array(z.string()),
      // homeowner: z.array(z.string()),
      //married: z.array(z.string()),
      // netWorth: z.array(z.string()),
      //children: z.array(z.string()),
    }),
    // businessProfile: z.object({
    //   jobTitle: z.array(z.string()),
    //   seniority: z.array(z.string()),
    //   department: z.array(z.string()),
    //   companyName: z.array(z.string()),
    //   companyDomain: z.array(z.string()),
    //   industry: z.array(z.string()),
    //   sic: z.array(z.string()),
    //   employeeCount: z.array(z.string()),
    //   companyRevenue: z.array(z.string()),
    //   companyNaics: z.array(z.string()),
    // }),
    attributes: z.object({
      //  creditRating: z.array(z.string()),
      //  languageCode: z.array(z.string()),
      // occupationGroup: z.array(z.string()),
      // occupationType: z.array(z.string()),
      // homeYearBuilt: numberRangeSchema,
      // singleParent: z.array(z.string()),
      //  craCode: z.array(z.string()),
      //  dwellingType: z.array(z.string()),
      //  creditRangeNewCredit: z.array(z.string()),
      //   ethnicCode: z.array(z.string()),
      // maritalStatus: z.array(z.string()),
      //   education: z.array(z.string()),
      // creditCardUser: z.array(z.string()),
      // investment: z.array(z.string()),
      // smoker: z.array(z.string()),
      //   donateConservative: z.array(z.string()),
      //   donateLiberal: z.array(z.string()),
      //   donatePolitical: z.array(z.string()),
      //   donateVeterans: z.array(z.string()),
      // homePurchasePrice: numberRangeSchema,
      //homePurchaseYear: numberRangeSchema,
      //  homeHeat: z.array(z.string()),
      //  homeSwimmingPool: z.array(z.string()),
      //  airCon: z.array(z.string()),
      //  sewer: z.array(z.string()),
      //  water: z.array(z.string()),
      // pets: z.array(z.string()),
      // cats: z.array(z.string()),
      // dogs: z.array(z.string()),
      // mortgageLoanType: z.array(z.string()),
      // mortgageRateType: z.array(z.string()),
      //  estimatedHomeValue: z.array(z.string()),
      //mortgageAmount: numberRangeSchema,
      // generationsInHouseHold: z.array(z.string()),
      //  salesTransactionType: z.array(z.string()),
    }),
    notNulls: z.array(z.string()),
    nullOnly: z.array(z.string()),
    jobId: z.string(),
    segment: z.array(z.string()),
    score: z.array(z.string()),
  }),
});
